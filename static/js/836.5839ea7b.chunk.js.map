{"version":3,"file":"static/js/836.5839ea7b.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/charSearchForm.js","components/pages/MainPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from './error.gif'\r\nconst ErrorMessage=()=>{\r\n    return(\r\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} alt=\"\"/>\r\n       <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"error\"/>\r\n    )\r\n}\r\nexport default ErrorMessage","import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage.js';\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport useMarvelService from '../../services/MarvelService';\nconst RandomChar = () => {\n    const [char, setChar] = useState({});\n\n\n    // state = {\n    //     char: {},\n    //     loading: true,\n    //     error:false,\n    //     // name:null,\n    //     // description:null,\n    //     // thumbnail:null,\n    //     // homepage:null,\n    //     // wiki:null\n    // }\n\n\n    //!монтирование componentDidMount -1 этап\n    //!обновление  componentDidUpdate -2 этап\n    //!размонтирование  componentWillUnmount -3 этап\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n\n    // const marvelService = new MarvelService();\n    const { loading, error, getCharacter, clearError } = useMarvelService();\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n\n\n        getCharacter(id)\n            .then(onCharLoaded);\n           \n        // .then(res=>{\n        //     this.setState(res)\n        // })\n    }\n\n\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error) ? <View char={char} /> : null;\n    return (\n        <div className=\"randomchar\">\n            {/* {loading ? <Spinner /> : <View char={char} />} */}\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\">\n                    <div onClick={updateChar} className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki } = char;\n    let imgStyle = { 'objectFit': 'cover' };\n    if (thumbnail == 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'contain' };\n    }\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n\n}\nexport default RandomChar;","import { useState, useEffect } from 'react';\nimport './charList.scss';\nimport abyss from '../../resources/img/abyss.jpg';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage.js';\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n\n    const { loading, error, getAllCharacters } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n        setCharList(charList => [...charList, ...newCharList])\n\n        setNewItemLoading(newItemLoading => false)\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended)\n\n    }\n\n    //клик на кнопку\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters()\n            .then(onCharListLoaded)\n\n    }\n\n\n    function renderItems(arr) {\n        const items = arr.map(item => {\n            let imgStyle = { 'objectFit': 'cover' };\n            if (item.thumbnail == 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = { 'objectFit': 'unset' };\n            }\n            return (\n                <li className=\"char__item\" key={item.id}\n                    onClick={() => props.onCharSelected(item.id)}\n                >\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        })\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n\n\n    const items = renderItems(charList);\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\n    \n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button disabled={newItemLoading} style={{ 'display': charEnded ? 'none' : 'block' }} onClick={() => onRequest(offset)}\n                className=\"button button__main button__long\">\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport Skeleton from '../skeleton/Skeleton.js'\nimport ErrorMessage from '../errorMessage/ErrorMessage.js';\nimport './charInfo.scss';\nconst CharInfo = (props) => {\n    const [char, setChar] = useState(null);//потому что пустой объект = true, что не подходит для скелетона \n\n    const { loading, error, getCharacter, clearError } = useMarvelService();\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n       \n\n    }\n  \n    const updateChar = () => {\n        const { charId } = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            \n    }\n\n\n\n\n\n    const skeleton = char || loading || error ? null : <Skeleton />\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = char;\n    let imgStyle = { 'objectFit': 'cover' };\n    if (thumbnail == 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'contain' };\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        if (i > 9) {\n                            return;\n                        }\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n\n\n\n            </ul>\n        </>\n    )\n\n}\nCharInfo.propTypes = {\n    charId: PropTypes.bool\n\n}\nexport default CharInfo;","import { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n    state={\r\n        error:false\r\n    }\r\n    componentDidCatch(err, errInfo){\r\n        this.setState({\r\n            error:true\r\n        })\r\n    }\r\n    render(){\r\n        if(this.state.error){\r\n            return <h2>Something get wrong</h2>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport decoration from '../../resources/img/vision.png';\r\nimport CharSearchForm from \"../charSearchForm/charSearchForm\";\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null)\r\n\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id)\r\n        // this.setState({\r\n        //     selectedChar: id\r\n        // })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                 <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar} />\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm />\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    )\r\n}\r\nexport default MainPage","import { useState, useCallback } from \"react\"\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const reqest = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n        setLoading(true);\r\n        try {\r\n            const response = await fetch(url, { method, body, headers })\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status ${response.status}`)\r\n            }\r\n            const data = await response.json();\r\n            setLoading(false);\r\n            return data\r\n        }\r\n        catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), [])\r\n    return { loading, reqest, error, clearError }\r\n}","import { useHttp } from \"../hooks/http.hook.js\";\r\nconst useMarvelService = () => {\r\n    const { loading, reqest, error, clearError } = useHttp();\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=0065c0a1a339412b87b251245bac71f2';\r\n    const _baseOffset = 210;\r\n\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await reqest(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n    const getCharacter = async (id) => {\r\n        const res = await reqest(`${_apiBase}characters/${id}?&${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0])\r\n    }\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await reqest(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics)\r\n    }\r\n    const getComics = async (id) => {\r\n        const res = await reqest(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0])\r\n    }\r\n    const getCharacterByName = async (name) => {\r\n\t\tconst res = await reqest(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id, id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"There is no description\",\r\n            pageCount: comics.pageCount\r\n                ? `${comics.pageCount} p.`\r\n                : \"No information about the number of pages\",\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            // optional chaining operator\r\n            price: comics.prices[0].price\r\n                ? `${comics.prices[0].price}$`\r\n                : \"not available\",\r\n\r\n        }\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        let charDescr = char.description;\r\n        if (charDescr === '') {\r\n            charDescr = 'Decription is missing.'\r\n        }\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: charDescr,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n\r\n    }\r\n    return { loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComics, getCharacterByName }\r\n}\r\n\r\nexport default useMarvelService"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","char","name","description","thumbnail","homepage","wiki","imgStyle","_jsxs","className","children","href","RandomChar","setChar","useState","useEffect","updateChar","onCharLoaded","loading","error","getCharacter","clearError","useMarvelService","id","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","onCharListLoaded","newCharList","ended","length","initial","items","arr","map","item","onCharSelected","renderItems","disabled","Skeleton","_Fragment","comics","i","charId","skeleton","ErrorBoundary","Component","constructor","arguments","state","componentDidCatch","err","errInfo","this","setState","render","CharSearchForm","getCharacterByName","results","Link","to","concat","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","component","MainPage","selectedChar","Helmet","CharList","CharInfo","decoration","reqest","useHttp","setLoading","setError","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_transformComics","_comics$textObjects$","title","pageCount","path","extension","language","textObjects","price","prices","_transformCharacter","charDescr","urls","res","getAllComics","getComics"],"sourceRoot":""}