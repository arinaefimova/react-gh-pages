{"version":3,"file":"static/js/438.987173b6.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/pages/singleComicPage.js","hooks/http.hook.js","services/MarvelService.js"],"sourcesContent":["import img from './error.gif'\r\nconst ErrorMessage=()=>{\r\n    return(\r\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} alt=\"\"/>\r\n       <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"error\"/>\r\n    )\r\n}\r\nexport default ErrorMessage","import { useParams, Link } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\n\r\nimport ErrorMessage from '../errorMessage/ErrorMessage.js';\r\nimport './singleComicPage.scss';\r\n\r\nconst SingleComicPage = () => {\r\n    const { comicId } = useParams();\r\n    const [ comic, setComic ] = useState(null);\r\n    const { loading, error, getComics, clearError } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateComic();\r\n    }, [comicId])\r\n\r\n    const onComicLoaded = (comic) => {\r\n        setComic(comic)\r\n\r\n\r\n    }\r\n\r\n    const updateComic = () => {\r\n\r\n\r\n        clearError();\r\n        getComics(comicId)\r\n            .then(onComicLoaded)\r\n\r\n    }\r\n\r\n\r\n\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const spinner = loading ? <Spinner /> : null;\r\n    const content = !(loading || error || !comic) ? <View comic={comic} /> : null;\r\n    return (\r\n        <>\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </>\r\n    )\r\n}\r\n\r\nconst View = ({ comic }) => {\r\n    const { title, description, pageCount, thumbnail, language, price } = comic;\r\n    return (\r\n        <div className=\"single-comic\">\r\n            <img src={thumbnail} alt={title} className=\"single-comic__img\" />\r\n            <div className=\"single-comic__info\">\r\n                <h2 className=\"single-comic__name\">{title}</h2>\r\n                <p className=\"single-comic__descr\">{description}</p>\r\n                <p className=\"single-comic__descr\">{pageCount}</p>\r\n                <p className=\"single-comic__descr\">Language: {language}</p>\r\n                <div className=\"single-comic__price\">{price}</div>\r\n            </div>\r\n            <Link to='/comics' className=\"single-comic__back\">Back to all</Link >\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default SingleComicPage;","import { useState, useCallback } from \"react\"\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const reqest = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n        setLoading(true);\r\n        try {\r\n            const response = await fetch(url, { method, body, headers })\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status ${response.status}`)\r\n            }\r\n            const data = await response.json();\r\n            setLoading(false);\r\n            return data\r\n        }\r\n        catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, [])\r\n\r\n    const clearError = useCallback(() => setError(null), [])\r\n    return { loading, reqest, error, clearError }\r\n}","import { useHttp } from \"../hooks/http.hook.js\";\r\nconst useMarvelService = () => {\r\n    const { loading, reqest, error, clearError } = useHttp();\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=0065c0a1a339412b87b251245bac71f2';\r\n    const _baseOffset = 210;\r\n\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await reqest(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter)\r\n    }\r\n    const getCharacter = async (id) => {\r\n        const res = await reqest(`${_apiBase}characters/${id}?&${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0])\r\n    }\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await reqest(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics)\r\n    }\r\n    const getComics = async (id) => {\r\n        const res = await reqest(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0])\r\n    }\r\n    const getCharacterByName = async (name) => {\r\n\t\tconst res = await reqest(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id, id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || \"There is no description\",\r\n            pageCount: comics.pageCount\r\n                ? `${comics.pageCount} p.`\r\n                : \"No information about the number of pages\",\r\n            thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n            language: comics.textObjects[0]?.language || \"en-us\",\r\n            // optional chaining operator\r\n            price: comics.prices[0].price\r\n                ? `${comics.prices[0].price}$`\r\n                : \"not available\",\r\n\r\n        }\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        let charDescr = char.description;\r\n        if (charDescr === '') {\r\n            charDescr = 'Decription is missing.'\r\n        }\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: charDescr,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n\r\n    }\r\n    return { loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComics, getCharacterByName }\r\n}\r\n\r\nexport default useMarvelService"],"names":["ErrorMessage","_jsx","style","display","width","height","objectFit","margin","src","img","alt","View","_ref","comic","title","description","pageCount","thumbnail","language","price","_jsxs","className","children","Link","to","SingleComicPage","comicId","useParams","setComic","useState","loading","error","getComics","clearError","useMarvelService","useEffect","updateComic","onComicLoaded","then","errorMessage","spinner","Spinner","content","_Fragment","reqest","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","data","json","e","message","_apiBase","_apiKey","_transformComics","comics","_comics$textObjects$","id","path","extension","textObjects","prices","_transformCharacter","char","charDescr","name","homepage","urls","wiki","items","getAllCharacters","offset","results","map","getCharacter","res","getAllComics","getCharacterByName"],"sourceRoot":""}